---
title: "Intro to R"
output:
  pdf_document: default
  html_document:
    df_print: paged
editor_options:
  chunk_output_type: console
---

#### Execute the following cells to load the libraries
```{r}
library(ggplot2)
library(dplyr)
```

#### Creating homeogenous datastructures: vectors and matrices (built on the fundamental datatypes character, numeric, integer, and logical)
```{r}
myvec=c(1,2,3)
myvec1=c('a','b','c')
myvec2=c(27.2,32.4,45,8)
myvec3=c(TRUE,FALSE,TRUE,FALSE)
mymat=matrix(c(1,2,3,4,5,6),nrow=2,ncol=3)
mymat1=matrix(c(1,2,3,4,5,6),nrow=2,ncol=3,byrow = TRUE)
print(myvec)
print(myvec1)
print(myvec2)
print(myvec3)
print(mymat)
print(mymat1)
typeof(myvec)
typeof(myvec1)
typeof(myvec2)
typeof(myvec3)
typeof(mymat)
```

#### Creating a list, a heterogenous datastructure
```{r}
mylist=list('a',23,1.00)
print(mylist)

```

#### Accessing elements of a datastructure
```{r}
myvec[1]
myvec1[3]
myvec2[2]
mymat[1,2]
```

#### Loading data into a dataframe, a heterogenous datastructure
```{r}
#file = 'http://openmv.net/file/food-texture.csv'
file = 'Data/food-texture.csv'
foodData = read.csv(file, header = TRUE, row.names = 1, stringsAsFactors = FALSE)
head(foodData, 5)
```

#### Attributes of a dataframe
```{r}
str(foodData)
nrow(foodData)
ncol(foodData)
colnames(foodData)
rownames(foodData)
```

#### Get the data type and the data structure associated with an object
```{r}
typeof('oil')
typeof(foodData)
```

#### Accessing elements of a data frame
```{r}
foodData$Oil
foodData[['Density']]
foodData[,'Crispy']
foodData['Fracture']
```

#### Accessing elements of a particular column of a data frame
```{r}
foodData$Oil
foodData$Density
foodData$Crispy
foodData$Fracture
foodData$Hardness
```

#### Accessing elements of multiple columns of a dataframe (using base R and dplyr)
```{r}
foodData[c('oil','Density')]
foodData %>% select(c(oil,Density))
foodData %>% select(-c(oil,Density))
```

```{r}
data='Data/court.csv'
jd=read.csv(data, header = TRUE)
head(jd,10)

```

```{r}
apply(jd, 2, mean)
```

#### Matrix example - judges problem
```{r}
courtdecision = function(n){
  jcp = c(0.9478,0.9535,0.8954,0.8977,0.7904)
  jicp = 1-jcp # broadcasting
  p = matrix(1, 1, 1)
  decision = c(1, 0)
  cdecision = vector('integer', ncol(p))
  for (j in p){
    cdecision[j] = sample(jcp, 10000, replace = FALSE, prob = (0.2,0.8))
  }
  if (sum(cdecision) >= 1){
    return(1)
    }
  else{
    return(0)
}
}
```

#### Court incorrect probability
```{r}
results = replicate(?, ?)

```

#### Accessing rows of a dataframe satisfying certain conditions
```{r}
```

#### Accessing row of a dataframe satisfying certain condition and particular columns
```{r}
```

#### Accessing rows of a dataframe satisfying certain conditions
```{r}
#Filter samples with Crispy index 9 or 15 (which are very rare)
```

#### Modifying a column of a dataframe
```{r}
```

#### Modify Crispy column to reflect high (0) or low (1) crispiness
```{r}
```

##### Change Crispy and Crispylevel columns to factor (categorical) type
```{r}
categorical_cols = c('Crispy', 'Crispylevel')
foodData[categorical_cols] = lapply(?, ?)
str(foodData)
```

#### Visualize the OilPercentage feature
```{r}
```

#### In-built functions for dataframes
```{r}
# Mean oil percentage across all samples

# Mean-centering of OilPercentage

# Sum of the squared deviation from the mean

# Average of the squared deviation from the mean

# Variance of OilPercentage

# Standard deviation of OilPercentage
```

#### Scatter plot between OilPercentage and Density
```{r}
```

#### Scatter plot between OilPercentage and Density color coded with Crispylevel
```{r}
```

#### Scale continuous columns of the dataframe
```{r}
```

#### Calculate the correlation matrix for the continuous features
```{r}

```

#### Scatter plot between Density and Hardness
```{r}
```

#### Scatter plot between Density and Fracture
```{r}
```













