geom_boxplot(aes(x = rent, y = area, fill = locality), outlier.colour = "red") +
scale_fill_manual(values = pcustom_colors) +
labs(x = "Rent", y = "Area", title = "Area by Rent and Locality for BHK") +
facet_wrap(~bathrooms) +  # Add this line to create separate plots for each facing
theme_minimal()
# Display the plot
p_area_rent
p_area_rent = ggplot(data = hData) +
geom_boxplot(aes(x = rent, y = area, fill = locality), outlier.colour = "red") +
scale_fill_manual(values = pcustom_colors) +
labs(x = "Rent", y = "Area", title = "Area by Rent and Locality for bathrooms") +
facet_wrap(~bathrooms) +  # Add this line to create separate plots for each facing
theme_minimal()
# Display the plot
p_area_rent
hData_Bike = hData %>% filter(parking == 'Bike')
p_area_rent = ggplot(data = hData) +
geom_boxplot(aes(x = rent, y = area, fill = locality), outlier.colour = "red") +
scale_fill_manual(values = pcustom_colors) +
labs(x = "Rent", y = "Area", title = "Area by Rent and Locality for praking space") +
facet_wrap(~parking) +  # Add this line to create separate plots for each facing
theme_minimal()
# Display the plot
p_area_rent
hData_Bike = hData %>% filter(parking == 'Bike')
p_area_rent = ggplot(data = hData_Bike) +
geom_boxplot(aes(x = rent, y = area, fill = locality), outlier.colour = "red") +
scale_fill_manual(values = pcustom_colors) +
labs(x = "Rent", y = "Area", title = "Area by Rent and Locality for praking space") +
facet_wrap(~parking) +  # Add this line to create separate plots for each facing
theme_minimal()
# Display the plot
p_area_rent
hData_Bikecar = hData %>% filter(parking == 'Bike and Car')
p_area_rent = ggplot(data = hData_Bikecar) +
geom_boxplot(aes(x = rent, y = area, fill = locality), outlier.colour = "red") +
scale_fill_manual(values = pcustom_colors) +
labs(x = "Rent", y = "Area", title = "Area by Rent and Locality for praking space") +
facet_wrap(~parking) +  # Add this line to create separate plots for each facing
theme_minimal()
# Display the plot
p_area_rent
hData_car = hData %>% filter(parking == 'Car')
p_area_rent = ggplot(data = hData_car) +
geom_boxplot(aes(x = rent, y = area, fill = locality), outlier.colour = "red") +
scale_fill_manual(values = pcustom_colors) +
labs(x = "Rent", y = "Area", title = "Area by Rent and Locality for praking space") +
facet_wrap(~parking) +  # Add this line to create separate plots for each facing
theme_minimal()
# Display the plot
p_area_rent
p = ggplot(data = hData) +
geom_bar(aes(x = locality, fill = Decision)) +
labs(x = "Locality", y = "Count", title = "Decision to buy or rent the House in any Given Locality")
p
# From Here I conclude that price_per_sqft Is not so Important Based the Standard Rules
# Area based Houses in different loacalities in Banglaore
p = ggplot(data = hData) +
geom_histogram(aes(x = area, fill = locality), binwidth = 1000) +
scale_fill_manual(values = pcustom_colors)
p
p = ggplot(data = hData) +
geom_histogram(aes(x = area, colour =  locality), binwidth = 250) +
scale_fill_manual(values = pcustom_colors)
p
p = ggplot(data = hData) +
geom_point(aes(x = area, colour =  locality), alpha = 0.7) +
scale_fill_manual(values = pcustom_colors)
p
p = ggplot(data = hData) + geom_point(aes(x = area, y = rent, colour = locality))
#scale_y_continuous(breaks = seq(10000, max(hData$rent, na.rm = TRUE), by = 10000))
p
p = ggplot(data = hData) +
geom_histogram(aes(x = rent, fill = locality), binwidth = 10000) +
scale_fill_manual(values = pcustom_colors) +
scale_x_continuous(limits = c(0, 100000), breaks = seq(0, 100000, by = 10000)) +  # Set limits and breaks
labs(x = "Rent", y = "Count", title = "Histogram of Rent by Locality") +
theme_minimal()
# Set limits and breaks
p
p = ggplot(data = hData) + geom_point(aes(x = area, y = rent, colour = locality))
#scale_y_continuous(breaks = seq(10000, max(hData$rent, na.rm = TRUE), by = 10000))
p
p = ggplot(data = hData) + geom_point(aes(x = area, y = rent, colour = locality))
#scale_y_continuous(breaks = seq(10000, max(hData$rent, na.rm = TRUE), by = 10000))
p
# Area based Houses in different loacalities in Banglaore
p = ggplot(data = hData) +
geom_histogram(aes(x = area, fill = locality), binwidth = 1000) +
scale_fill_manual(values = pcustom_colors)
p
p = ggplot(data = hData) +
geom_histogram(aes(x = area, colour =  locality), binwidth = 250) +
scale_fill_manual(values = pcustom_colors)
p
p = ggplot(data = hData) +
geom_bar(aes(x = locality, fill = Decision)) +
labs(x = "Locality", y = "Count", title = "Decision to buy or rent the House in any Given Locality")
p
# From Here I conclude that price_per_sqft Is not so Important Based the Standard Rules
p = ggplot(data = hData) +
geom_histogram(aes(x = area, colour =  locality), binwidth = 250) +
scale_fill_manual(values = pcustom_colors)
p
p = ggplot(data = hData) +
geom_point(aes(x = area, colour =  locality), alpha = 0.7) +
scale_fill_manual(values = pcustom_colors)
p
p = ggplot(data = hData) + geom_point(aes(x = area, y = rent, colour = locality))
#scale_y_continuous(breaks = seq(10000, max(hData$rent, na.rm = TRUE), by = 10000))
p
p = ggplot(data = hData) +
geom_histogram(aes(x = rent, fill = locality), binwidth = 10000) +
scale_fill_manual(values = pcustom_colors) +
scale_x_continuous(limits = c(0, 100000), breaks = seq(0, 100000, by = 10000)) +  # Set limits and breaks
labs(x = "Rent", y = "Count", title = "Histogram of Rent by Locality") +
theme_minimal()
# Set limits and breaks
p
p = ggplot(data = hData) + geom_point(aes(x = area, y = rent, colour = locality))
#scale_y_continuous(breaks = seq(10000, max(hData$rent, na.rm = TRUE), by = 10000))
p
p = ggplot(data = hData) +
geom_histogram(aes(x = rent, fill = locality), binwidth = 10000) +
scale_fill_manual(values = pcustom_colors) +
scale_x_continuous(limits = c(0, 100000), breaks = seq(0, 100000, by = 10000)) +  # Set limits and breaks
labs(x = "Rent", y = "Count", title = "Histogram of Rent by Locality") +
theme_minimal()
# Set limits and breaks
p
p = ggplot(data = hData) +
geom_histogram(aes(x = rent, fill = locality), binwidth = 10000) +
scale_fill_manual(values = pcustom_colors) +
scale_x_continuous(limits = c(0, 100000), breaks = seq(0, 100000, by = 10000)) +
labs(x = "Rent", y = "Count", title = "Histogram of Rent by Locality") +
theme_minimal()
p
p = ggplot(data = hData) +
geom_histogram(aes(x = rent, fill = locality), binwidth = 10000) +
scale_fill_manual(values = pcustom_colors) +
scale_x_continuous(limits = c(0, 100000), breaks = seq(0, 100000, by = 10000)) +
labs(x = "Rent", y = "Count", title = "Histogram of Rent by Locality") +
theme_minimal()
p
p_area_rent = ggplot(data = hData) +
geom_boxplot(aes(x = rent, y = area, fill = locality), outlier.colour = "red") +
scale_fill_manual(values = pcustom_colors) +
labs(x = "Rent", y = "Area", title = "Area by Rent and Locality for bathrooms") +
facet_wrap(~bathrooms) +  # Add this line to create separate plots for each facing
theme_minimal()
# Display the plot
p_area_rent
library(ggplot2)
library(dplyr)
# Load the house price dataset
hData = read.csv('Data/houseprices.csv', header = TRUE, stringsAsFactors = FALSE, na.strings = c("", "NA", "Not Available", "not available"))
str(hData)
# Load the house price dataset
hData = read.csv('Data/houseprices.csv', header = TRUE, stringsAsFactors = FALSE, na.strings = c("", "NA", "Not Available", "not available"))
str(hData)
# Create a New Data column House_Value = area*price_per_sqft which can we used to make buy, rent decision
hData = hData %>% mutate(House_Value = area*price_per_sqft)
str(hData)
# create a New Data Column Decision either to buy or rent the house based on the standard house Price-to-Rent Ratio
hData = hData %>% mutate(Decision = ifelse((House_Value / (rent * 12)) < 15, "Rent", "Buy"))
str(hData)
# create a New Data Column Decision either to buy or rent the house based on the standard house Price-to-Rent Ratio
hData = hData %>% mutate(Decision = ifelse((House_Value / (rent * 12)) < 15, "Rent", "Buy"))
str(hData)
# Convert 'locality', 'facing' and 'parking' columns to factors
categorical_cols = c('locality', 'facing', 'parking', 'Decision')
hData[categorical_cols] = lapply(hData[categorical_cols], as.factor)
str(hData)
# Continuous columns
continuous_cols = setdiff(colnames(hData), categorical_cols)
# Plot percentage of NAs in each column of the data frame
hData_NA = setNames(stack(sapply(hData, function(x){(sum(is.na(x))/length(x))*100}))[2:1], c('Feature','Value'))
p = ggplot(data = hData_NA, aes(x = Feature, y = Value)) +
geom_bar(stat = 'identity', fill = 'steelblue', width = 0.3) +
theme(text = element_text(size = 14, face = 'bold'),
axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
xlab('') + ylab('Percentage') +
ggtitle('Percentage of NAs across all features')
p
categorical_cols1 = c('facing', 'parking')
# Add NA as a factor level for categorical columns facing and parking only
hData[categorical_cols1] = lapply(hData[categorical_cols1], addNA)
str(hData)
#see what all locations are present
distinct_values = unique(hData$locality)
print(distinct_values)
pcustom_colors = c(
"Attibele" = "darkorange",  # Dark Orange
"BTM Layout" = "royalblue",        # Royal Blue
"Electronic City" = "forestgreen",        # Forest Green
"Indiranagar" = "steelblue",               # Gold
"Jayanagar" = "purple",   # Rebecca Purple
"K R Puram " = "deeppink",        # Deep Pink
"Malleshwaram" = "yellow",     # Medium Sea Green
"Marathahalli" = "brown",         # Saddle Brown
"Yalahanka" = "gray"          # Firebrick
)
p = ggplot(data = hData) +
geom_bar(aes(x = locality, fill = Decision)) +
labs(x = "Locality", y = "Count", title = "Decision to buy or rent the House in any Given Locality")
p
# From Here I conclude that price_per_sqft Is not so Important Based the Standard Rules
# Area based Houses in different loacalities in Banglaore
p = ggplot(data = hData) +
geom_histogram(aes(x = area, fill = locality), binwidth = 1000) +
scale_fill_manual(values = pcustom_colors)
p
p = ggplot(data = hData) + geom_point(aes(x = area, y = rent, colour = locality))
#scale_y_continuous(breaks = seq(10000, max(hData$rent, na.rm = TRUE), by = 10000))
p
p = ggplot(data = hData) +
geom_histogram(aes(x = rent, fill = locality), binwidth = 10000) +
scale_fill_manual(values = pcustom_colors) +
scale_x_continuous(limits = c(0, 100000), breaks = seq(0, 100000, by = 10000)) +
labs(x = "Rent", y = "Count", title = "Histogram of Rent by Locality") +
theme_minimal()
p
# Boxplot area in all Localities
p_area_facing = ggplot(data = hData) +
geom_boxplot(aes(x = locality, y = area, fill = locality), outlier.colour = "red") +
scale_fill_manual(values = pcustom_colors) +
labs(x = "Locality", y = "Area", title = "Area by Locality") +
theme_minimal()
p_area_facing
# box plot rent by locality
p_area_rent = ggplot(data = hData) +
geom_boxplot(aes(x = locality, y = rent, fill = locality), outlier.colour = "red") +
scale_fill_manual(values = pcustom_colors) +
labs(x = "Locality", y = "Rent", title = "Rent Distribution by Locality") +
theme_minimal()
# Display the plot
p_area_rent
# Boxplot area vs rent in all Localities
p_area_facing = ggplot(data = hData) +
geom_boxplot(aes(x = area, y = rent, fill = locality), outlier.colour = "red") +
scale_fill_manual(values = pcustom_colors) +
labs(x = "Area", y = "Rent", title = "Rent by Area and Locality") +
theme_minimal()
p_area_facing
# Create the plot
p_area_facing = ggplot(data = hData) +
geom_boxplot(aes(x = (facing = 'East'), y = area, fill = locality), outlier.colour = "red") +
scale_fill_manual(values = pcustom_colors) +
labs(x = "Facing", y = "Area", title = "Area by Facing and Locality") +
theme_minimal()
# Display the plot
p_area_facing
p_area_rent = ggplot(data = hData) +
geom_boxplot(aes(x = rent, y = area, fill = locality), outlier.colour = "red") +
scale_fill_manual(values = pcustom_colors) +
labs(x = "Rent", y = "Area", title = "Area by Rent and Locality for all House Facings") +
facet_wrap(~ facing) +  # Add this line to create separate plots for each facing
theme_minimal()
# Display the plot
p_area_rent
hData_EF = hData %>% filter(facing == 'East')
p_area_rent = ggplot(data = hData_EF) +
geom_boxplot(aes(x = rent, y = area, fill = locality), outlier.colour = "red") +
scale_fill_manual(values = pcustom_colors) +
labs(x = "Rent", y = "Area", title = "Area by Rent and Locality for East facing") +
facet_wrap(~ facing) +  # Add this line to create separate plots for each facing
theme_minimal()
# Display the plot
p_area_rent
hData_WF = hData %>% filter(facing == 'West')
p_area_rent = ggplot(data = hData_WF) +
geom_boxplot(aes(x = rent, y = area, fill = locality), outlier.colour = "red") +
scale_fill_manual(values = pcustom_colors) +
labs(x = "Rent", y = "Area", title = "Area by Rent and Locality for West facing") +
facet_wrap(~ facing) +  # Add this line to create separate plots for west facing
theme_minimal()
# Display the plot
p_area_rent
hData_NF = hData %>% filter(facing == 'North')
p_area_rent = ggplot(data = hData_NF) +
geom_boxplot(aes(x = rent, y = area, fill = locality), outlier.colour = "red") +
scale_fill_manual(values = pcustom_colors) +
labs(x = "Rent", y = "Area", title = "Area by Rent and Locality for North facing") +
facet_wrap(~ facing) +  # Add this line to create separate plots for west facing
theme_minimal()
# Display the plot
p_area_rent
hData_SF = hData %>% filter(facing == 'South')
p_area_rent = ggplot(data = hData_SF) +
geom_boxplot(aes(x = rent, y = area, fill = locality), outlier.colour = "red") +
scale_fill_manual(values = pcustom_colors) +
labs(x = "Rent", y = "Area", title = "Area by Rent and Locality for South facing") +
facet_wrap(~ facing) +  # Add this line to create separate plots for west facing
theme_minimal()
# Display the plot
p_area_rent
hData_NWF = hData %>% filter(facing == 'North-West')
p_area_rent = ggplot(data = hData_NWF) +
geom_boxplot(aes(x = rent, y = area, fill = locality), outlier.colour = "red") +
scale_fill_manual(values = pcustom_colors) +
labs(x = "Rent", y = "Area", title = "Area by Rent and Locality for South facing") +
facet_wrap(~ facing) +  # Add this line to create separate plots for west facing
theme_minimal()
# Display the plot
p_area_rent
hData_NEF = hData %>% filter(facing == 'North-East')
p_area_rent = ggplot(data = hData_NEF) +
geom_boxplot(aes(x = rent, y = area, fill = locality), outlier.colour = "red") +
scale_fill_manual(values = pcustom_colors) +
labs(x = "Rent", y = "Area", title = "Area by Rent and Locality for South facing") +
facet_wrap(~ facing) +  # Add this line to create separate plots for west facing
theme_minimal()
# Display the plot
p_area_rent
hData_SEF = hData %>% filter(facing == 'South-East')
p_area_rent = ggplot(data = hData_SEF) +
geom_boxplot(aes(x = rent, y = area, fill = locality), outlier.colour = "red") +
scale_fill_manual(values = pcustom_colors) +
labs(x = "Rent", y = "Area", title = "Area by Rent and Locality for South facing") +
facet_wrap(~ facing) +  # Add this line to create separate plots for west facing
theme_minimal()
# Display the plot
p_area_rent
distinct_values = unique(hData$facing)
print(distinct_values)
p_area_rent = ggplot(data = hData) +
geom_boxplot(aes(x = rent, y = area, fill = locality), outlier.colour = "red") +
scale_fill_manual(values = pcustom_colors) +
labs(x = "Rent", y = "Area", title = "Area by Rent and Locality for BHK") +
facet_wrap(~ BHK) +  # Add this line to create separate plots for each facing
theme_minimal()
# Display the plot
p_area_rent
hData_1BHK = hData %>% filter(BHK == 1)
p_area_rent = ggplot(data = hData_1BHK) +
geom_boxplot(aes(x = rent, y = area, fill = locality), outlier.colour = "red") +
scale_fill_manual(values = pcustom_colors) +
labs(x = "Rent", y = "Area", title = "Area by Rent and Locality for 1 BHK") +
facet_wrap(~ BHK) +  # Assuming you have a column 'facing'
theme_minimal()
# Display the plot
p_area_rent
hData_2BHK = hData %>% filter(BHK == 2)
# Create the plot for 2 BHK
p_area_rent = ggplot(data = hData_2BHK) +
geom_boxplot(aes(x = rent, y = area, fill = locality), outlier.colour = "red") +
scale_fill_manual(values = pcustom_colors) +
labs(x = "Rent", y = "Area", title = "Area by Rent and Locality for 2 BHK") +
facet_wrap(~ BHK) +  # Assuming you have a column 'facing'
theme_minimal()
# Display the plot
p_area_rent
hData_3BHK = hData %>% filter(BHK == 3)
# Create the plot for 2 BHK
p_area_rent = ggplot(data = hData_3BHK) +
geom_boxplot(aes(x = rent, y = area, fill = locality), outlier.colour = "red") +
scale_fill_manual(values = pcustom_colors) +
labs(x = "Rent", y = "Area", title = "Area by Rent and Locality for 3 BHK") +
facet_wrap(~ BHK) +  # Assuming you have a column 'facing'
theme_minimal()
# Display the plot
p_area_rent
hData_4BHK = hData %>% filter(BHK == 4)
# Create the plot for 2 BHK
p_area_rent = ggplot(data = hData_4BHK) +
geom_boxplot(aes(x = rent, y = area, fill = locality), outlier.colour = "red") +
scale_fill_manual(values = pcustom_colors) +
labs(x = "Rent", y = "Area", title = "Area by Rent and Locality for 4 BHK") +
facet_wrap(~ BHK) +  # Assuming you have a column 'facing'
theme_minimal()
# Display the plot
p_area_rent
p = ggplot(data = hData) +
geom_bar(aes(x = BHK, fill = locality)) + scale_fill_manual(values = pcustom_colors) +
labs(x = "BHK", y = "Count", title = "Count of House BHK by Locality")
p
p_area_rent = ggplot(data = hData) +
geom_boxplot(aes(x = rent, y = area, fill = locality), outlier.colour = "red") +
scale_fill_manual(values = pcustom_colors) +
labs(x = "Rent", y = "Area", title = "Area by Rent and Locality for praking space") +
facet_wrap(~parking) +  # Add this line to create separate plots for each facing
theme_minimal()
# Display the plot
p_area_rent
hData_Bike = hData %>% filter(parking == 'Bike')
p_area_rent = ggplot(data = hData_Bike) +
geom_boxplot(aes(x = rent, y = area, fill = locality), outlier.colour = "red") +
scale_fill_manual(values = pcustom_colors) +
labs(x = "Rent", y = "Area", title = "Area by Rent and Locality for praking space") +
facet_wrap(~parking) +  # Add this line to create separate plots for each facing
theme_minimal()
# Display the plot
p_area_rent
hData_Bikecar = hData %>% filter(parking == 'Bike and Car')
p_area_rent = ggplot(data = hData_Bikecar) +
geom_boxplot(aes(x = rent, y = area, fill = locality), outlier.colour = "red") +
scale_fill_manual(values = pcustom_colors) +
labs(x = "Rent", y = "Area", title = "Area by Rent and Locality for praking space") +
facet_wrap(~parking) +  # Add this line to create separate plots for each facing
theme_minimal()
# Display the plot
p_area_rent
hData_car = hData %>% filter(parking == 'Car')
p_area_rent = ggplot(data = hData_car) +
geom_boxplot(aes(x = rent, y = area, fill = locality), outlier.colour = "red") +
scale_fill_manual(values = pcustom_colors) +
labs(x = "Rent", y = "Area", title = "Area by Rent and Locality for praking space") +
facet_wrap(~parking) +  # Add this line to create separate plots for each facing
theme_minimal()
# Display the plot
p_area_rent
# Chunk 1
library(ggplot2)
library(dplyr)
# Following package is for side-by-side plots. First run install.packages('patchwork') from console
library(patchwork)
theme_set(theme_dark())
# Chunk 2
# Parameters
mu_Male = 170
sigma_Male = 8
# Bin width
delta = 2.0
nsimulations = 1e5
simulatedData_Male = rnorm(nsimulations, mean = mu_Male, sd = sigma_Male)
# Chunk 3
simulatedData_Male1 = rnorm(100, mean = mu_Male, sd = sigma_Male)
simulatedData_Male1
# Chunk 4
dfHeights = data.frame(simulatedData_Male)
colnames(dfHeights) = c('MaleHeight')
head(dfHeights, 3)
# Chunk 5
height_170cm = dfHeights$MaleHeight == 170
height_170cm
# Chunk 6
height_170cm = sum(dfHeights$MaleHeight == 170)/nrow(dfHeights)
height_170cm
mean(dfHeights$MaleHeight == 170)
# Chunk 7
height_170_172cm = sum(170 <= dfHeights$MaleHeight & dfHeights$MaleHeight <= 172)/nrow(dfHeights)
height_170_172cm
mean(170 <= dfHeights$MaleHeight & dfHeights$MaleHeight <= 172)
# Chunk 8
height_170_171cm = sum(170 <= dfHeights$MaleHeight & dfHeights$MaleHeight <= 171)/nrow(dfHeights)
height_170_171cm
mean(170 <= dfHeights$MaleHeight & dfHeights$MaleHeight <= 171)
# Chunk 9
# Plot the frequency histogram for male student heights
p1 = ggplot(data = dfHeights) +
geom_histogram(aes(x = MaleHeight, y = after_stat(count)),
breaks = seq(mu_Male-4*sigma_Male, mu_Male+4*sigma_Male, by = delta),
colour = 'black', fill = 'steelblue', alpha = 0.4) +
labs(x = 'Height (cm)', y = 'Frequency')
p1
# Chunk 10
# Plot the relative frequency histogram for male student heights
p2 = ggplot(data = dfHeights) +
geom_histogram(aes(x = MaleHeight, y = after_stat(count)/sum(after_stat(count))),
breaks = seq(mu_Male-4*sigma_Male, mu_Male+4*sigma_Male, by = delta),
colour = 'black', fill = 'steelblue', alpha = 0.4) +
labs(x = 'Height (cm)', y = 'Relative Frequency')
p2
# Chunk 11
# Plot the density histogram for male student heights
p3 = ggplot(data = dfHeights) +
geom_histogram(aes(x = MaleHeight, y = after_stat(density)),
breaks = seq(mu_Male-4*sigma_Male, mu_Male+4*sigma_Male, by = delta),
colour = 'black', fill = 'steelblue', alpha = 0.4) +
labs(x = 'Height (cm)', y = 'Density')
p3
# Chunk 12
# Plot the density histogram along with density curve for male student heights
p4 = ggplot(data = dfHeights) +
geom_histogram(aes(x = MaleHeight, y = after_stat(density)),
breaks = seq(mu_Male-4*sigma_Male, mu_Male+4*sigma_Male, by = delta),
colour = 'black', fill = 'steelblue', alpha = 0.4) +
stat_function(fun = dnorm, args = list(mean = mean(dfHeights$MaleHeight), sd = sd(dfHeights$MaleHeight))) +
labs(x = 'Height (cm)', y = 'Density')
p4
# Chunk 13
# Plot the frequency histogram for male student heights
p1 = ggplot(data = dfHeights) +
geom_histogram(aes(x = MaleHeight, y = after_stat(count)),
breaks = seq(mu_Male-4*sigma_Male, mu_Male+4*sigma_Male, by = delta),
colour = 'black', fill = 'steelblue', alpha = 0.4) +
labs(x = 'Height (cm)', y = 'Frequency')
# Plot the relative frequency histogram for male student heights
p2 = ggplot(data = dfHeights) +
geom_histogram(aes(x = MaleHeight, y = after_stat(count)/sum(after_stat(count))),
breaks = seq(mu_Male-4*sigma_Male, mu_Male+4*sigma_Male, by = delta),
colour = 'black', fill = 'steelblue', alpha = 0.4) +
labs(x = 'Height (cm)', y = 'Relative Frequency')
# Plot the density histogram for male student heights
p3 = ggplot(data = dfHeights) +
geom_histogram(aes(x = MaleHeight, y = after_stat(density)),
breaks = seq(mu_Male-4*sigma_Male, mu_Male+4*sigma_Male, by = delta),
colour = 'black', fill = 'steelblue', alpha = 0.4) +
labs(x = 'Height (cm)', y = 'Density')
# Plot the density histogram along with density curve for male student heights
p4 = ggplot(data = dfHeights) +
geom_histogram(aes(x = MaleHeight, y = after_stat(density)),
breaks = seq(mu_Male-4*sigma_Male, mu_Male+4*sigma_Male, by = delta),
colour = 'black', fill = 'steelblue', alpha = 0.4) +
stat_function(fun = dnorm, args = list(mean = mean(dfHeights$MaleHeight), sd = sd(dfHeights$MaleHeight))) +
labs(x = 'Height (cm)', y = 'Density')
# Plot the histograms side-by-side
p1 + p2 + p3 + p4 + plot_layout(ncol = 2)
# Chunk 14
height_170_172cm = sum(156 <= dfHeights$MaleHeight & dfHeights$MaleHeight <= 160.5)/nrow(dfHeights)
height_170_172cm
mean(156 <= dfHeights$MaleHeight & dfHeights$MaleHeight <= 160.5)
