class BST:
class Node:
def __init__(self,ele):
self.data = ele
self.left = None
self.Right = None

def __init__(self):
self.root = None
self.count = 0

def Isempty(self):
return self.count == 0

def count(self):
return self.count

def Add_Node(self,ele):
cur = parent = self.root
while cur != None and ele != cur.data
parent = cur
if ele < cur.data:
cur = cur.left
elif ele > cur.data:
cur = cur.right

if cur == None:
new_node = self.Node(ele)
if parent == None:
self.root = new_node
elif ele < parent.data
parent.left = new_node
elif ele > parent.data
parent.right = new_node

def IsMember(self,key):
if not self.Isempty():
cur = self.root
while cur!= None:
if key < cur.data
cur = cur.data
elif key > cur.data
cur = cur.data
else:
return True
return false
return false

def Bstin(self):
if not self.Isempty():
Inorder(self.node)

def Inorder(self,node):
self.inorder(node.left)
print(node.data)
self.inorder(node.right)

def Bstpost(self):
if not self.Isempty():
postorder(self.root)

def postorder(self,node):
postorder(node.left)
postorder(node.right)
print(node.data)

def Bstpre(self):
if not self.Ismember():
pre(self.root)

def preorder(self,node):
print(node.data)
postorder(node.left)
postorder(node.right)

def levelorder(self):
if not self.Isempty():
queue = Flexiqeueu()
queue.enqueue(self.root)
while not queue.Isempty():
node = queue.dequeue()
print(node)
if node.left:
queue.enqueue(node.left)
if node.right:
queue.enqueue(node.right)

def deleteNode(self,key):
if not self.Isempty():
self.root = self.delete(self.root,key)

def delete(self,node,key):
if node == None:
return None
if key < node.data
left = self.delete(node.left,key)
elif key > node.data
right = self.delete(node.right,key)

elif node.left and node.right:
temp = self.FindMin(node.right)
node.data = temp.data
node.right = self.delete(node.right,key)
else:
if node.left == None
node = node.right
elif node.right ==  None:
node = node.left
self.count -=1
return temp

def self.FindMin(self,node):
if node.left == None:
return nde
else:
return(self.FindMe(node.left))

def Inorder_Iterative(self):
    if self.root is None:
        return
    
    stack = []
    cur = self.root
    
    while cur is not None or len(stack) > 0:
        # Reach the leftmost node of the current node
        while cur is not None:
            stack.append(cur)  # Push the current node to the stack
            cur = cur.left     # Move to the left child

        # Current must be None at this point, so we pop the top of the stack
        cur = stack.pop()
        print(cur.data)        # Print the node's value (Root)

        # Visit the right subtree
        cur = cur.right

def Preorder_Iterative(self):
    if self.root is None:
        return

    stack = []
    stack.append(self.root)
    
    while len(stack) > 0:
        cur = stack.pop()
        print(cur.data)  # Print the node's value (Root)
        
        # Push right child first so that left is processed first
        if cur.right:
            stack.append(cur.right)
        if cur.left:
            stack.append(cur.left)

def Postorder_Iterative(self):
    if self.root is None:
        return

    stack1 = []
    stack2 = []
    stack1.append(self.root)

    while len(stack1) > 0:
        cur = stack1.pop()
        stack2.append(cur)  # Store nodes in reverse order (Root → Right → Left)

        if cur.left:
            stack1.append(cur.left)
        if cur.right:
            stack1.append(cur.right)

    # Process all nodes in stack2 to get Left → Right → Root
    while len(stack2) > 0:
        cur = stack2.pop()
        print(cur.data)


    # Recursive function for level order traversal
    def level_order_recursive(self, nodes):
        # Base case: if the list of nodes is empty, stop the recursion
        if not nodes:
            return

        # List to store the nodes of the next level
        next_level = []

        # Print the current level
        for node in nodes:
            print(node.data, end=" ")

            # Add children of the current node to the next level
            if node.left:
                next_level.append(node.left)
            if node.right:
                next_level.append(node.right)

        print()  # Move to the next line for the new level

        # Recursively call for the next level
        self.level_order_recursive(next_level)

    # Main function to initiate recursive level order traversal
    def Levelorder_Recursive(self):
        if self.root:
            # Start recursion with the root node as the first level
            self.level_order_recursive([self.root])
