import java.io.IOException;	
import java.util.StringTokenizer;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.FloatWritable;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;



public class Temp {
	
	public static class TempMapper extends Mapper<LongWritable, Text, Text, IntWritable> {
		public void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {
					String line = value.toString();
					String[] token = line.split(" ");
					
					
					
					String city = context.getConfiguration().get("City");
					if(token[2].equals(city)) {
						String[] temp = token[1].split(".");
						int f = Integer.parseInt(temp[0]);
						context.write(new Text(token[2]), new IntWritable(f));
						
					}

		                }
		            }
		        
	
		public static class TempReducer extends Reducer<Text, FloatWritable, Text, FloatWritable> {
		    public void reduce(Text key, Iterable<FloatWritable> values, Context context) throws IOException, InterruptedException {
		        float max = -200.00f;
		        float min = -100.00f;

		        for (FloatWritable x: values) {
		            if(min > x.get()) {
		            	min = x.get();
		            }
		            if(max < x.get()) {
		            	max = x.get();
		            }
		        }

		        // Format the output to include both max and min temperatures
		        String str = String.join("Max Temp: ", String.valueOf(max), "Min Temp: ", String.valueOf(min));
		        context.write(key, new FloatWritable(Float.parseFloat(str)));
		    }
		}
	


	public static void main(String[] args) throws Exception {
		// TODO Auto-generated method stub
		Configuration conf = new Configuration();
		
		Job job = Job.getInstance(conf, "my count");

		job.setJarByClass(Temp.class);
		job.setMapperClass(TempMapper.class);
		job.setReducerClass(TempReducer.class);

		job.setOutputKeyClass(Text.class);
		job.setOutputValueClass(IntWritable.class);

		FileInputFormat.addInputPath(job, new Path(args[0]));
		
		FileOutputFormat.setOutputPath(job, new Path(args[1]));

		System.exit(job.waitForCompletion(true) ? 0: 1);
	}


	}

