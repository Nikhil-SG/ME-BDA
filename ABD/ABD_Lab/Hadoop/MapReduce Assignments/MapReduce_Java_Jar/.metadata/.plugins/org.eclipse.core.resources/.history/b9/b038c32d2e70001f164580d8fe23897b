import java.io.IOException;	
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.FloatWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;



public class Temp {
	
	public static class TempMapper extends Mapper<LongWritable, Text, Text, FloatWritable> {
        public void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {
            String line = value.toString();
            String[] token = line.split(" ");
            
            String city = context.getConfiguration().get("City");
            if (token[2].equals(city)) {
                float temperature = Float.parseFloat(token[1]); 
                context.write(new Text(token[2]), new FloatWritable(temperature)); }
        }
    }
		        
	
		public static class TempReducer extends Reducer<Text, FloatWritable, Text, Text> {
		    public void reduce(Text key, Iterable<FloatWritable> values, Context context) throws IOException, InterruptedException {
		           float max = -Float.MAX_VALUE; // Use proper extreme values for max and min
		            float min = Float.MAX_VALUE;

		            // Iterate over values to find max and min temperatures
		            for (FloatWritable val : values) {
		                if (val.get() < min) {
		                    min = val.get();
		                }
		                if (val.get() > max) {
		                    max = val.get();
		                }
		            }
		            // Output the max and min temperatures as a formatted string
		            String result = String.join(", ", "Max Temp: " + max, "Min Temp: " + min);
		            context.write(key, new Text(result));
		        }
		    }
	


		// TODO Auto-generated method stub
		public static void main(String[] args) throws Exception {
	        Configuration conf = new Configuration();
	        Job job = Job.getInstance(conf, "temperature analysis");

	        job.setJarByClass(Temp.class);
	        job.setMapperClass(TempMapper.class);
	        job.setReducerClass(TempReducer.class);

	        job.setOutputKeyClass(Text.class);
	        job.setOutputValueClass(FloatWritable.class);

	        FileInputFormat.addInputPath(job, new Path(args[0]));
	        FileOutputFormat.setOutputPath(job, new Path(args[1]));

	        System.exit(job.waitForCompletion(true) ? 0 : 1);
	}


	}

