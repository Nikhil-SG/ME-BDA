

	import java.io.IOException;
	import org.apache.hadoop.conf.Configuration;
	import org.apache.hadoop.fs.Path;
	import org.apache.hadoop.io.IntWritable;
	import org.apache.hadoop.io.LongWritable;
	import org.apache.hadoop.io.Text;
	import org.apache.hadoop.mapreduce.Job;
	import org.apache.hadoop.mapreduce.Mapper;
	import org.apache.hadoop.mapreduce.Reducer;
	import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
	import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

	public class Countrecords {
	    // Mapper class
	    public static class CityMapper extends Mapper<LongWritable, Text, Text, IntWritable> {
	        private final static IntWritable one = new IntWritable(1);  // Each city has 1 data point

	        public void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {
	            String line = value.toString();
	            String[] token = line.split("\\s+");  // Split the input by spaces or tabs

	            // Ensure the token array has at least 3 values (assuming city name is the third token)
	            if (token.length >= 3) {
	                String city = token[2];  // City name is the third token
	                context.write(new Text(city), one);  // Emit the city with a count of 1
	            }
	        }
	    }

	    // Reducer class
	    public static class CityReducer extends Reducer<Text, IntWritable, Text, IntWritable> {
	        public void reduce(Text key, Iterable<IntWritable> values, Context context) throws IOException, InterruptedException {
	            int sum = 0;

	            // Sum up the counts for each city
	            for (IntWritable val : values) {
	                sum += val.get();
	            }
	            // Output the city and the total count
	            context.write(key, new IntWritable(sum));
	        }
	    }

	    // Main method
	    public static void main(String[] args) throws Exception {
	        Configuration conf = new Configuration();
	        Job job = Job.getInstance(conf, "city data point count");

	        job.setJarByClass(Countrecords.class);
	        job.setMapperClass(CityMapper.class);
	        job.setReducerClass(CityReducer.class);

	        job.setOutputKeyClass(Text.class);
	        job.setOutputValueClass(IntWritable.class);

	        FileInputFormat.addInputPath(job, new Path(args[0]));
	        FileOutputFormat.setOutputPath(job, new Path(args[1]));

	        System.exit(job.waitForCompletion(true) ? 0 : 1);
	    }
	}

}
